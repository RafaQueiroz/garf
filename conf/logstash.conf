# Define the rules to parse the log files to get 
# the needed information.

input {
    file{
        path => ['/var/log/honeypot.log']
    }
    beats{
        port => 5044
    }
}

filter {
    #Filtrar a data da tentativa de acesso e ip de origem
    grok{
        patterns_dir => ["/home/rafael/garf/conf/patterns"]
        #Kippo Pattern
        #match => { "message" => "%{TIMESTAMP_ISO8601:date}\s(\[%{WORD}.%{WORD}.%{WORD}.%{WORD}\])\s%{WORD}\s%{WORD}:\s%{IPV4:origin_ip}:%{NUMBER}\s\(%{IPV4}:%{NUMBER}\)\s\[%{WORD}:\s%{NUMBER}\]"}
        match => { "message" => "%{CUSTOM_DATE:raw_date}\s%{WORD:protocol}\(%{INT}\)\s%{CONNECTION_TYPE:connection_status}\s%{IPV4:source_ip}\s%{NUMBER}\s%{IPV4}\s%{INT:destination_port}:\s%{INT}\s%{WORD}\s"}
    }

    date{
        match => ["raw_date", "YYYY-MM-dd-HH:mm:ss.SSSS"]
        target => "access_date"
        timezone => "UTC"
    }
    
    
    if "_grokparsefailure" in [tags] {
         drop { }
    }
}

output{
     elasticsearch {
        hosts => ["127.0.0.1"]
        index => "honeyd"
     }
     stdout{                                                                                                                                     
	codec => rubydebug                                                                                                                      
     }
}
